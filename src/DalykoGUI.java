import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class DalykoGUI extends JFrame {

    private JList<String> dalykasListUI;
    private DefaultListModel<String> listModel;
    private JTextField subjectNameField;
    private JButton addButton, removeButton;
    private JLabel statusLabel;

    public DalykoGUI() {
        // Set up the GUI window
        setTitle("Dalykai Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(new BorderLayout(10, 10));

        // Components
        dalykasListUI = new JList<>();
        listModel = new DefaultListModel<>();
        subjectNameField = new JTextField();
        addButton = new JButton("Add Subject");
        removeButton = new JButton("Remove Selected");
        statusLabel = new JLabel("", JLabel.CENTER);

        // Panel for buttons
        JPanel bottomPanel = new JPanel(new GridLayout(3, 1, 5, 5));
        bottomPanel.add(addButton);
        bottomPanel.add(removeButton);
        bottomPanel.add(statusLabel);

        // Panel for input
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new GridLayout(2, 1, 5, 5));
        topPanel.add(new JLabel("Subject Name:"));
        topPanel.add(subjectNameField);

        // Add components to frame
        add(new JLabel("Dalykai List", JLabel.CENTER), BorderLayout.NORTH);
        add(new JScrollPane(dalykasListUI), BorderLayout.CENTER);
        add(topPanel, BorderLayout.WEST);
        add(bottomPanel, BorderLayout.SOUTH);

        // Populate list with subjects from database
        loadSubjects();

        // Action Listeners
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addSubject();
            }
        });

        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeSubject();
            }
        });
    }

    private void loadSubjects() {
        ArrayList<Dalykas> dalykaiList = fetchAllSubjects();
        for (Dalykas dalykas : dalykaiList) {
            listModel.addElement(dalykas.getIdDalykas() + " " + dalykas.getDalykoPavadinimas());
        }
        dalykasListUI.setModel(listModel);
    }

    private ArrayList<Dalykas> fetchAllSubjects() {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        ArrayList<Dalykas> dalykasList = new ArrayList<>();

        try {
            conn = Prisijungimas_DB.prisijungimas_DB();
            if (conn != null) {
                String sql = "SELECT * FROM dalykas";
                ps = conn.prepareStatement(sql);
                rs = ps.executeQuery();
                while (rs.next()) {
                    int dalykoID = rs.getInt("idDalykas");
                    String dalykoPV = rs.getString("Dalyko_pavadinimas");
                    dalykasList.add(new Dalykas(dalykoID, dalykoPV));
                }
            } else {
                System.out.println("Failed to connect to the database.");
            }
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("SQL Error: " + e.getMessage());
            }
        }
        return dalykasList;
    }

    private void addSubject() {
        String subjectName = subjectNameField.getText().trim();
        if (subjectName.isEmpty()) {
            statusLabel.setText("Please enter a subject name.");
            statusLabel.setForeground(Color.RED);
            return;
        }

        Dalykas newSubject = new Dalykas(0, subjectName);  // ID will be auto-generated by DB

        Connection conn = null;
        PreparedStatement ps = null;

        try {
            conn = Prisijungimas_DB.prisijungimas_DB();
            if (conn != null) {
                String insertSQL = "INSERT INTO dalykas (Dalyko_pavadinimas) VALUES (?)";
                ps = conn.prepareStatement(insertSQL);
                ps.setString(1, newSubject.getDalykoPavadinimas());
                int rowsAffected = ps.executeUpdate();
                if (rowsAffected > 0) {
                    loadSubjects();  // Reload subjects after adding
                    statusLabel.setText("Subject added successfully.");
                    statusLabel.setForeground(Color.GREEN);
                }
            } else {
                System.out.println("Failed to connect to the database.");
            }
        } catch (SQLException e) {
            statusLabel.setText("Error adding subject.");
            statusLabel.setForeground(Color.RED);
            System.out.println("SQL Error: " + e.getMessage());
        } finally {
            try {
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("SQL Error: " + e.getMessage());
            }
        }
    }

    private void removeSubject() {
        int selectedIndex = dalykasListUI.getSelectedIndex();
        if (selectedIndex == -1) {
            statusLabel.setText("Please select a subject to remove.");
            statusLabel.setForeground(Color.RED);
            return;
        }

        String selectedSubjectText = dalykasListUI.getSelectedValue();
        int dalykoID = Integer.parseInt(selectedSubjectText.split(" ")[0]);

        Connection conn = null;
        PreparedStatement ps = null;

        try {
            conn = Prisijungimas_DB.prisijungimas_DB();
            if (conn != null) {
                String deleteSQL = "DELETE FROM dalykas WHERE idDalykas = ?";
                ps = conn.prepareStatement(deleteSQL);
                ps.setInt(1, dalykoID);
                int rowsDeleted = ps.executeUpdate();
                if (rowsDeleted > 0) {
                    listModel.remove(selectedIndex);  // Remove from the JList model
                    statusLabel.setText("Subject removed successfully.");
                    statusLabel.setForeground(Color.GREEN);
                }
            } else {
                statusLabel.setText("Failed to connect to the database.");
                statusLabel.setForeground(Color.RED);
            }
        } catch (SQLException e) {
            statusLabel.setText("Error removing subject.");
            statusLabel.setForeground(Color.RED);
            System.out.println("SQL Error: " + e.getMessage());
        } finally {
            try {
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new DalykoGUI().setVisible(true));
    }
}
